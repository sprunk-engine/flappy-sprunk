@startuml
package behaviors {
    package camera {

class FreeLookCameraController extends LogicBehavior {
    +move(direction: Vector3): void
    +look(delta: Vector2): void
}
class FreeLookCameraKeyboardMouseInput extends DeviceInputBehavior {
    #onEnable(): void
    +onKeyboardKeyDown(key: string): void
    +onKeyboardKeyUp(key: string): void
    +tick(_deltaTime: number): void
    +onMouseMove(__0: { delta: Vector2; }): void
}

    }
    package debug {

class GridRenderBehavior extends LinesRenderBehavior

    }
    package flappybird {

enum GameState {
    START
    PLAYING
    GAMEOVER
}
class FlappGameManagerLogicBehavior extends LogicBehavior {
    +onGameStateChange: Event<GameState>
    +onSpeedChange: Event<number>
    +wantToFlap(): void
    +increaseScore(): void
    +getGameState(): GameState
    +birdTransform: Transform | null
    +birdTransform: Transform | null
    +isGamePlaying(): boolean
    +gameOver(): void
    +gameSpeed: number
}
class BirdAnimationController extends LogicBehavior {
    #onEnable(): void
    #onDisable(): void
}
class BirdLogicBehavior extends LogicBehavior {
    +onPhysicsEnabled: Event<Rigidbody>
    +onFlap: Event<void>
    #onEnable(): void
    +tick(): void
    +flap(): void
    +die(): void
}
class FlappyBirdInputBehavior extends DeviceInputBehavior {
    +onKeyboardKeyDown(key: string): void
}
class PipeLogicBehavior extends ScrollingLogicBehavior {
    +tick(deltaTime: number): void
}
class ScrollingSpeedManagerDriven extends LogicBehavior {
    #onEnable(): void
}
class PipeSpawnerLogicBehavior extends LogicBehavior {
    #onEnable(): void
    +tryToSpawnPipe(): void
}

    }
    package logic {

class IntervalEmitterLogicBehavior extends LogicBehavior {
    #_timeSinceLastEmit: number
    #_emitInterval: number
    +tick(deltaTime: number): void
    +pause(): void
    +resume(): void
    +changeInterval(interval: number): void
    +isPlaying(): boolean
    +getTimeSinceLastEmit(): number
    +getCurrentInterval(): number
    +setTimeSinceLastEmit(time: number): void
}
class AcceleratingEmitterLogicBehavior extends IntervalEmitterLogicBehavior {
    +tick(deltaTime: number): void
    +resetAcceleration(): void
    +getCurrentInterval(): number
}
class ScoreLogicBehavior extends LogicBehavior {
    +increaseScore(): void
    +resetScore(): void
}
class SpriteAnimationBehavior extends LogicBehavior {
    +totalFrames: number
    #onEnable(): void
    +showFrame(frame: number): void
    +hideAll(): void
}

    }
    package output {

enum GameState {
    START
    PLAYING
    GAMEOVER
}
class GameOverSoundOutputBehavior extends AudioBehavior {
    #onEnable(): void
    +_playHit(): void
}
class PlayerSoundOutputBehavior extends AudioBehavior {
    #onEnable(): void
}
class RotateByVelocityOutputBehavior extends OutputBehavior {
    +rigidbody: Rigidbody | null
    +tick(deltaTime: number): void
}
class ScoreSoundOutputBehavior extends AudioBehavior {
    #onEnable(): void
}

    }
    package text {

class ScoreOutputBehavior extends OutputBehavior {
    #onEnable(): void
}

    }
    package transform {

class ScrollingLogicBehavior extends LogicBehavior {
    +scrollSpeed: number
    +tick(deltaTime: number): void
}
class RepeatableScrollingLogicBehavior extends ScrollingLogicBehavior {
    +tick(deltaTime: number): void
}

    }
}
package gameobjects {

enum GameState {
    START
    PLAYING
    GAMEOVER
}
class BirdAnimationGameObject extends GameObject {
    #onEnable(): void
}
class BirdGameObject extends GameObject {
    #onEnable(): void
}
class GizmoGameObject extends GameObject {
    #onEnable(): void
}
class GroundGameObject extends GameObject {
    #onEnable(): void
}
class PipeGameObject extends GameObject {
    #onEnable(): void
}
class PipeSpawnerGameObject extends GameObject {
    #onEnable(): void
}
class ScoreGameObject extends GameObject {
    #onEnable(): void
    +getLogic(): ScoreLogicBehavior
}

    package scenes {

enum GameState {
    START
    PLAYING
    GAMEOVER
}
class FlappyBirdScene extends GameObject {
    #onEnable(): void
}

    }
}
package models {

enum GameState {
    START
    PLAYING
    GAMEOVER
}

}
package services {
}
package shaders {
}
package utils {
}
FreeLookCameraKeyboardMouseInput --> "1" FreeLookCameraController
FlappGameManagerLogicBehavior --> "1" GameState
FlappGameManagerLogicBehavior --> "1" ScoreLogicBehavior
BirdAnimationController --> "1" FlappGameManagerLogicBehavior
BirdAnimationController --> "1" IntervalEmitterLogicBehavior
BirdAnimationController --> "1" SpriteAnimationBehavior
BirdAnimationController --> "1" GameState
BirdLogicBehavior --> "1" FlappGameManagerLogicBehavior
FlappyBirdInputBehavior --> "1" BirdLogicBehavior
PipeLogicBehavior --> "1" FlappGameManagerLogicBehavior
ScrollingSpeedManagerDriven --> "1" FlappGameManagerLogicBehavior
ScrollingSpeedManagerDriven --> "1" ScrollingLogicBehavior
PipeSpawnerLogicBehavior --> "1" FlappGameManagerLogicBehavior
PipeSpawnerLogicBehavior --> "1" GameState
GameOverSoundOutputBehavior --> "1" FlappGameManagerLogicBehavior
PlayerSoundOutputBehavior --> "1" BirdLogicBehavior
ScoreSoundOutputBehavior --> "1" ScoreLogicBehavior
BirdGameObject --> "1" BirdLogicBehavior
PipeSpawnerGameObject --> "1" FlappGameManagerLogicBehavior
PipeSpawnerGameObject --> "1" AcceleratingEmitterLogicBehavior
PipeSpawnerGameObject --> "1" GameState
ScoreGameObject --> "1" ScoreLogicBehavior
FlappyBirdScene --> "1" BirdGameObject
FlappyBirdScene --> "1" FlappGameManagerLogicBehavior
FlappyBirdScene --> "1" GameState
@enduml